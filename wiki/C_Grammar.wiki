#summary BNF of the C grammar subset which is handled by the algorithm

== Introduction ==

This page describes the subset of the C language grammar which is handled by the algorithm. The grammar is described in Backus-Naur Form.

== Which syntactic structures are handled ? ==

Basically any structure legal in the C language except, mainly, the following elements:
  # Pointers.
  # Arrays.
  # *goto*, *break*, *continue* and *return* commands.
  # *switch* statement.
  # Bitwise operators ( ^, ~, >>, <<, &, | ) and bitwise assignment operators ( <<=, >>=, ~=, &=, ^=, |= ).
  # Modulo operator (*%*).
  # Enumerators (*enum*).

In addition, the following applies:
  # Only one function definition is allowed per translation unit (enforced by the BNF structure).
  # All variables are considered as integers (maybe later we will decide to limit variable declaration to int or unsigned int).

== The Grammar in BNF ==

*translation_unit* 
        ::= external_declaration

*external_declaration* 
        ::= function_definition 
        | declaration

*function_definition* 
        ::= declaration_specifiers declarator declaration_list compound_statement
	| declaration_specifiers declarator compound_statement
	| declarator declaration_list compound_statement
	| declarator compound_statement

*primary_expression* 
        ::= IDENTIFIER
	| CONSTANT
	| '(' expression ')'

*postfix_expression* 
        ::= primary_expression
	| postfix_expression INC_OP
	| postfix_expression DEC_OP

* unary_expression *
	::= postfix_expression
	| INC_OP unary_expression 
	| DEC_OP unary_expression
	| unary_operator unary_expression

* unary_operator *
	::= '+'
	| '-'
	| '!'

* multiplicative_expression *
	::= unary_expression
	| multiplicative_expression '*' unary_expression
	| multiplicative_expression '/' unary_expression

* additive_expression *
	::= multiplicative_expression
	| additive_expression '+' multiplicative_expression
	| additive_expression '-' multiplicative_expression

* shift_expression *
	::= additive_expression

* relational_expression *
	::= shift_expression
	| relational_expression '<' shift_expression
	| relational_expression '>' shift_expression
	| relational_expression LE_OP shift_expression
	| relational_expression GE_OP shift_expression

* equality_expression *
	::= relational_expression
	| equality_expression EQ_OP relational_expression
	| equality_expression NE_OP relational_expression

* and_expression *
	::= equality_expression
	| and_expression '&' equality_expression

* exclusive_or_expression *
	::= and_expression

* inclusive_or_expression *
	::= exclusive_or_expression

* logical_and_expression *
	::= inclusive_or_expression
	| logical_and_expression AND_OP inclusive_or_expression

* logical_or_expression *
	::= logical_and_expression
	| logical_or_expression OR_OP logical_and_expression

* conditional_expression *
	::= logical_or_expression
	| logical_or_expression '?' expression ':' conditional_expression

* assignment_expression *
	::= conditional_expression
	| unary_expression assignment_operator assignment_expression

* assignment_operator *
	::= '='
	| MUL_ASSIGN
	| DIV_ASSIGN
	| ADD_ASSIGN
	| SUB_ASSIGN

* expression *
	::= assignment_expression
	| expression ',' assignment_expression

* declaration *
	::= declaration_specifiers ';'
	| declaration_specifiers init_declarator_list ';'

* declaration_specifiers *	
	::= type_specifier

* init_declarator_list *
	::= init_declarator
	| init_declarator_list ',' init_declarator

* init_declarator *
	::= declarator
	| declarator '=' initializer
	
* type_specifier *
	::= VOID
	| CHAR
	| SHORT
	| INT
	| LONG
	| FLOAT
	| DOUBLE
	| SIGNED
	| UNSIGNED

* declarator *
	::= direct_declarator

* direct_declarator *
	::= IDENTIFIER
	| '(' declarator ')'
	| direct_declarator '(' parameter_type_list ')'
	| direct_declarator '(' identifier_list ')'
	| direct_declarator '(' ')'

* parameter_type_list *
	::= parameter_list

* parameter_list *
	::= parameter_declaration
	| parameter_list ',' parameter_declaration

* parameter_declaration *
	::= declaration_specifiers declarator
	| declaration_specifiers

* identifier_list *
	::= IDENTIFIER
	| identifier_list ',' IDENTIFIER

* initializer *
	::= assignment_expression
	| '{' initializer_list '}'
	| '{' initializer_list ',' '}'

* initializer_list *
	::= initializer
	| initializer_list ',' initializer

* statement *
	::= compound_statement
	| expression_statement
	| selection_statement
	| iteration_statement

* compound_statement *
	::= '{' '}'
	| '{' statement_list '}'
	| '{' declaration_list '}'
	| '{' declaration_list statement_list '}'

* declaration_list *
	::= declaration
	| declaration_list declaration

* statement_list *
	::= statement
	| statement_list statement
	
* expression_statement *
	::= ';' 
	| expression ';'

* selection_statement *
	::= IF '(' expression ')' statement
	| IF '(' expression ')' statement ELSE statement

* iteration_statement *
	::= WHILE '(' expression ')' statement
	| DO statement WHILE '(' expression ')' ';'
	| FOR '(' expression_statement expression_statement expression ')' statement